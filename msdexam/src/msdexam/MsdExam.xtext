grammar msdexam.MsdExam with org.eclipse.xtext.common.Terminals

generate msdExam "http://www.MsdExam.msdexam"

X21:
	{X21} 'program' ID declarations+=Declaration*
;

Declaration:
	Function | Node | Input | Stream | DataDecl | Parameter
;

Parameter:
	'parameter' name=ID ':' type=Type
;

InputNNode:
	Node | Input
;

Type:
	 {Type} 'int' |  {Type} 'string' | name=ID
;

DataDecl:
	'data' name=ID '{' dataValues+=DataValue (',' dataValues+=DataValue)* '}'
;

DataValue:
	name=ID ':' type=Type
;

//Stream:
//	'stream' (inputs+=[Node] | inputs+=[Input]) (',' (inputs+=[Node] | inputs+=[Input]))* ('to' functions+=Element (',' functions+=Element)* )+
//;

Stream: 
	'stream' inputs+=[InputNNode] (',' inputs+=[InputNNode])* ('to' functions+=Element (',' functions+=Element)* )+
;


Element://id=ID might not be correct
	funcNode=[Node] | '[' (name=ID | function=Lambda) ']' | 'output' output=ID
;

Lambda:
	'(' id=ID ':' type=Type ')' '{' exp=Exp '}'
;

Node:
	'node' name=ID '[' (function=[Function] | lambda=Lambda) ']'
;

Input:
	'input' name=ID ':' type=Type
;

Function:
	'function' name=ID function=Lambda
;

Exp returns Expression://ObjectVariable | {Expression} None  | New | Logical
	MainFactor | New | {Expression} None | Logical | ObjectVariable
;

MainFactor returns Expression:
	Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*
;

Factor returns Expression:
	Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*
;

Primary returns Expression:
	Number | Parenthesis | VariableCreation | Variable 
;

Variable returns Expression:
	{Var} id=ID
;

VariableCreation returns Expression:
	{Let} 'let' id=ID '=' value=Exp 'in' body=Exp 'end'
;

Parenthesis returns Expression:
	'(' Exp ')'
;

Number returns Expression:
	{Num} value=INT
;

//ID Might not be correct here
ObjectVariable returns Expression:
	 id=ID '.' var=Variable
;


Logical returns Expression:
	'if' LogicExp 'then' if=Exp 'else' else=Exp 'end'
;

New returns Expression:
	'new' name=ID '[' variables+=NewObj (',' variables+=NewObj)* ']'
;

NewObj:
	var=Variable '=' value=Exp
;

LogicExp returns Expression:
	Factor ( '='  {Equals.left=current} 
		   | '<'  {LessThan.left=current}
		   | '>'  {GreaterThan.left=current}
		   | '<=' {LessThanOrEquals.left=current} 
		   | '>=' {GreaterThanOrEquals.left=current}) right=Factor
;

None:
	'none'
;













